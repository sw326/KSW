-- 기존 쿼리 수정 및 새로운 시나리오 추가

-- 1. 자녀가 있는 회원의 정보와 자녀 수 조회
SELECT m.MEMBER_NAME, m.PHONE_NUMBER, COUNT(c.CHILD_ID) as CHILDREN_COUNT,
      mt.MEMBER_TYPE_CODE -- 회원 유형 추가
FROM MEMBER m
LEFT JOIN CHILDREN c ON m.MEMBER_ID = c.MEMBER_ID
JOIN MEMBER_TYPE mt ON m.MEMBER_ID = mt.MEMBER_ID
WHERE m.HAS_CHILDREN = 1
GROUP BY m.MEMBER_ID, m.MEMBER_NAME, m.PHONE_NUMBER, mt.MEMBER_TYPE_CODE;

-- 2. 카테고리별 도서 판매량과 매출액
SELECT ar.RATING_NAME, c.CATEGORY_NAME, 
      COUNT(o.ORDER_ID) as ORDER_COUNT, 
      SUM(o.PAYMENT_AMOUNT) as TOTAL_SALES
FROM CATEGORIES c
JOIN AGE_RATINGS ar ON c.AGE_RATING_ID = ar.AGE_RATING_ID
JOIN BOOKS b ON c.CATEGORY_ID = b.CATEGORY_ID
JOIN ORDERS o ON b.BOOK_ID = o.BOOK_ID
GROUP BY ar.RATING_NAME, c.CATEGORY_ID, c.CATEGORY_NAME
ORDER BY ar.RATING_NAME, TOTAL_SALES DESC;

-- 3. 회원 유형별 평균 구매금액 (결제수단별로 구분)
SELECT mt.MEMBER_TYPE_CODE, pm.PAYMENT_TYPE,
      COUNT(o.ORDER_ID) as ORDER_COUNT,
      AVG(o.PAYMENT_AMOUNT) as AVG_PAYMENT
FROM MEMBER_TYPE mt
JOIN ORDERS o ON mt.MEMBER_ID = o.MEMBER_ID
JOIN PAYMENT_METHODS pm ON o.ORDER_ID = pm.ORDER_ID
GROUP BY mt.MEMBER_TYPE_CODE, pm.PAYMENT_TYPE
ORDER BY mt.MEMBER_TYPE_CODE;

-- 4. 최근 한달간 가장 많이 팔린 도서 TOP 5 (결제수단 포함)
SELECT b.BOOK_NAME, b.PUBLISHER_NAME, 
      COUNT(o.ORDER_ID) as SALE_COUNT,
      pm.PAYMENT_TYPE,
      SUM(o.PAYMENT_AMOUNT) as TOTAL_SALES
FROM BOOKS b
JOIN ORDERS o ON b.BOOK_ID = o.BOOK_ID
JOIN PAYMENT_METHODS pm ON o.ORDER_ID = pm.ORDER_ID
WHERE o.ORDER_ID IN (
   SELECT ORDER_ID 
   FROM (
       SELECT ORDER_ID, RANK() OVER (ORDER BY ORDER_ID DESC) as RN
       FROM ORDERS
   ) WHERE RN <= 5
)
GROUP BY b.BOOK_ID, b.BOOK_NAME, b.PUBLISHER_NAME, pm.PAYMENT_TYPE
ORDER BY SALE_COUNT DESC;

-- 5. 장바구니에 담고 구매하지 않은 상품
SELECT
    b.BOOK_NAME,
    c.CATEGORY_NAME,
    COUNT(*) as CART_COUNT,
    SUM(CASE WHEN o.ORDER_ID IS NOT NULL THEN 1 ELSE 0 END) as PURCHASE_COUNT
FROM CART_ITEMS ci
JOIN BOOKS b ON ci.BOOK_ID = b.BOOK_ID
JOIN CATEGORIES c ON b.CATEGORY_ID = c.CATEGORY_ID
LEFT JOIN ORDERS o ON ci.BOOK_ID = o.BOOK_ID AND ci.MEMBER_ID = o.MEMBER_ID
GROUP BY b.BOOK_NAME, c.CATEGORY_NAME
HAVING COUNT(*) > (SUM(CASE WHEN o.ORDER_ID IS NOT NULL THEN 1 ELSE 0 END))
ORDER BY (COUNT(*) - SUM(CASE WHEN o.ORDER_ID IS NOT NULL THEN 1 ELSE 0 END)) DESC;

-- 6. 특정회원이 구매한 책 리스트
SELECT 
    b.BOOK_NAME,
    o.QUANTITY,
    o.PAYMENT_AMOUNT
FROM MEMBER m
JOIN ORDERS o ON m.MEMBER_ID = o.MEMBER_ID
JOIN BOOKS b ON o.BOOK_ID = b.BOOK_ID
WHERE m.MEMBER_NAME = '이학생';

-- 7. 회원별 장바구니 통계
SELECT m.MEMBER_NAME, mt.MEMBER_TYPE_CODE,
      COUNT(ci.BOOK_ID) as CART_ITEMS,
      SUM(ci.QUANTITY) as TOTAL_QUANTITY,
      SUM(ci.PRICE * ci.QUANTITY) as TOTAL_AMOUNT
FROM MEMBER m
JOIN MEMBER_TYPE mt ON m.MEMBER_ID = mt.MEMBER_ID
LEFT JOIN CART_ITEMS ci ON m.MEMBER_ID = ci.MEMBER_ID
GROUP BY m.MEMBER_ID, m.MEMBER_NAME, mt.MEMBER_TYPE_CODE
ORDER BY TOTAL_AMOUNT DESC NULLS LAST;

-- 8. 배송지별 주문 통계
SELECT da.POSTAL_CODE, 
      COUNT(o.ORDER_ID) as ORDER_COUNT,
      SUM(o.PAYMENT_AMOUNT) as TOTAL_AMOUNT,
      AVG(o.DELIVERY_FEE) as AVG_DELIVERY_FEE
FROM DELIVERY_ADDRESSES da
JOIN ORDERS o ON da.DELIVERY_ADDRESS_ID = o.DELIVERY_ADDRESS_ID
GROUP BY da.POSTAL_CODE
HAVING COUNT(o.ORDER_ID) > 1
ORDER BY ORDER_COUNT DESC;

-- 9. 회원 유형별 자녀 연령대 분포
SELECT mt.MEMBER_TYPE_CODE,
      CASE 
          WHEN MONTHS_BETWEEN(SYSDATE, c.BIRTH_DATE)/12 < 7 THEN '미취학'
          WHEN MONTHS_BETWEEN(SYSDATE, c.BIRTH_DATE)/12 < 13 THEN '초등학생'
          WHEN MONTHS_BETWEEN(SYSDATE, c.BIRTH_DATE)/12 < 16 THEN '중학생'
          ELSE '고등학생'
      END as AGE_GROUP,
      COUNT(*) as CHILDREN_COUNT
FROM MEMBER_TYPE mt
JOIN MEMBER m ON mt.MEMBER_ID = m.MEMBER_ID
JOIN CHILDREN c ON m.MEMBER_ID = c.MEMBER_ID
GROUP BY mt.MEMBER_TYPE_CODE,
        CASE 
            WHEN MONTHS_BETWEEN(SYSDATE, c.BIRTH_DATE)/12 < 7 THEN '미취학'
            WHEN MONTHS_BETWEEN(SYSDATE, c.BIRTH_DATE)/12 < 13 THEN '초등학생'
            WHEN MONTHS_BETWEEN(SYSDATE, c.BIRTH_DATE)/12 < 16 THEN '중학생'
            ELSE '고등학생'
        END
ORDER BY mt.MEMBER_TYPE_CODE, AGE_GROUP;